
@{
    ViewBag.Title = "UserPage";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdminPage.cshtml";
}

<h2>UserPage</h2>

<div id="page-wrapper">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">UserPage</h1>
            </div>
            <!-- /.col-lg-12 -->
        </div>
        <div class="panel-body">
            <div class="row">
                <div class="col-lg-12">
                    <div class="row">
                        <div class="col-lg-8">
                            <div class="input-group custom-search-form col-lg-12">
                                <input type="text" id="searchInput" class="form-control" placeholder="Search..." onkeyup="searchTable()">
                                <span class="input-group-btn">
                                    <button class="btn btn-primary" type="button" onclick="searchTable()">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </span>
                            </div>
                        </div>

                    </div>
                    <div class="table-responsive">
                        <table id="transactionTable" class="table table-bordered table-hover table-striped">
                            <thead>
                                <tr>
                                    <th>Full Name</th>
                                    <th>Phone Number</th>
                                    <th>Date Created</th>
                                    <th>View Detail</th>
                                    <th>Status</th>
                                    <th>Role</th>

                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                    <!-- /.table-responsive -->
                    <div class="modal fade" id="userDetailModal" tabindex="-1" aria-labelledby="userDetailModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="userDetailModalLabel">User Details</h5>
                                    @*<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>*@
                                </div>
                                <div class="modal-body">
                                    <!-- User details will be displayed here -->
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    </div>
<script>

    //fetch('https://localhost:7008/api/Person/GetAllAccountByAdmin')
    //    .then(response => response.json())
    //    .then(data => {
    //        const tbody = document.querySelector('#transactionTable tbody');

    //        data.dataObject.forEach((transaction, index) => {
    //            const row = document.createElement('tr');

    //            const idCell = document.createElement('td');
    //            idCell.textContent = index + 1;
    //            row.appendChild(idCell);

    //            const userIdCell = document.createElement('td');
    //            userIdCell.textContent = transaction.fullName;
    //            row.appendChild(userIdCell);

    //            const descriptionCell = document.createElement('td');
    //            descriptionCell.textContent = transaction.gender ? "Male" : "Female";
    //            row.appendChild(descriptionCell);

    //            const statusCell = document.createElement('td');
    //            statusCell.textContent = transaction.email;
    //            row.appendChild(statusCell);

    //            const actionCell = document.createElement('td');



    //            actionCell.textContent = transaction.phoneNumber;


    //            row.appendChild(actionCell);
    //            tbody.appendChild(row);
    //        });
    //    })
    //    .catch(error => console.error('Error fetching transactions:', error));

    window.addEventListener('load', (event) => {
       
        fetchDataAndShowInTable();

    });

    function displayDataInTable(data) {
        const tbody = $("#transactionTable tbody");

        data.forEach((item) => {
            const row = $("<tr>");

            row.append($("<td>").text(item.fullName));
            row.append($("<td>").text(item.phoneNumber));
            row.append($("<td>").text(formatDate(item.dateUserRe)));
            row.append(
                $("<td>").append(
                    $("<button>").text("View Detail").addClass("btn btn-primary").on("click", function () {
                        viewDetail(item);
                    })
                )
            );
            
            row.append($("<td>").text(item.status ? "Active" : "Inactive"));
            row.append($("<td>").text(item.roles.join(", ")));

            const actionTd = $("<td>");

            if (item.status) {
                const banButton = $("<button>").text("Ban").addClass("btn btn-danger").on("click", function () {
                    banUser(item.id);
                });

                actionTd.append(banButton);
            } else {
                const unbanButton = $("<button>").text("Unban").addClass("btn btn-success").on("click", function () {
                    unbanUser(item.id);
                });

                actionTd.append(unbanButton);
            }

            row.append(actionTd);

            tbody.append(row);
        });
    }

    async function fetchDataAndShowInTable() {
        try {
            const response = await fetch("https://localhost:7008/api/Person/GetAllAccountByAdmin");
            const data = await response.json();

            if (response.ok) {
                displayDataInTable(data.dataObject);
            } else {
                console.error("Error fetching data:", data);

            }
        } catch (error) {
            console.error("Error fetching data:", error);
        }
    }

    

    function viewDetail(user) {
        showUserDetailModal(user);
    }

    function showUserDetailModal(user) {
        const modalBody = $("#userDetailModal .modal-body");

        modalBody.empty();

        const userDetailElement = $("<dl>");

        userDetailElement.append($("<dt>").text("ID:"));
        userDetailElement.append($("<dd>").text(user.id));

        userDetailElement.append($("<dt>").text("User Name:"));
        userDetailElement.append($("<dd>").text(user.userName));

        userDetailElement.append($("<dt>").text("Email:"));
        userDetailElement.append($("<dd>").text(user.email));

        userDetailElement.append($("<dt>").text("Address:"));
        userDetailElement.append($("<dd>").text(user.address));

        userDetailElement.append($("<dt>").text("Gender:"));
        userDetailElement.append(
            user.gender
                ? $("<dd>").text("Male")
                : $("<dd>").text("Female")
        );

        userDetailElement.append($("<dt>").text("Phone Number:"));
        userDetailElement.append($("<dd>").text(user.phoneNumber));

        userDetailElement.append($("<dt>").text("Date of Birth:"));
        userDetailElement.append($("<dd>").text(formatDate(user.dob)));

        userDetailElement.append($("<dt>").text("Full Name:"));
        userDetailElement.append($("<dd>").text(user.fullName));

        userDetailElement.append($("<dt>").text("Date User Re:"));
        userDetailElement.append($("<dd>").text(formatDate(user.dateUserRe)));

        userDetailElement.append($("<dt>").text("Roles:"));
        userDetailElement.append($("<dd>").text(user.roles.join(", ")));

        modalBody.append(userDetailElement);

        // Show the modal
        $("#userDetailModal").modal("show");
    }

    // Helper function to format the date
    function formatDate(date) {
        return new Date(date).toLocaleDateString();
    }

    //function parseJwt(token) {
    //    var base64Url = token.split('.')[1];
    //    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    //    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
    //        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    //    }).join(''));

    //    return JSON.parse(jsonPayload);
    //}
    function parsejwt(token) {
        var base64Url = token.split('.')[1];
        var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));

        return JSON.parse(jsonPayload);
    }
    document.addEventListener('DOMContentLoaded', function () {
        var jwtToken = sessionStorage.getItem('jwtToken');
        console.log(jwtToken);
        var decodedtoken = parsejwt(jwtToken);
        redirectBasedOnUserRole(decodedtoken);
    });
    function redirectBasedOnUserRole(decodedToken) {
        if (decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] &&
            decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'].includes('Audience')) {
            // Redirect to page a
            window.location.href = '/Audience/Manage/Manage'.replace('/Home', '');
        
        } else if (decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] &&
            decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'].includes('SuperAdmin')) {
            window.location.href = '/Admin/Manage/UserPageBySuperAdmin'.replace('/Home', '');
        } else {
            // Handle other roles or scenarios
            console.log('Unknown role or scenario');
        }
    }

    async function banUser(userId) {
        try {
            const response = await fetch(`https://localhost:7008/api/Person/BanAccount?userId=${userId}`);

            if (!response.ok) {
                throw new Error("Error banning the user");
            }

            // Optionally, you can handle the response here if needed
            console.log("User banned successfully");

            // Refresh the table or update the UI as needed
            location.reload();
        } catch (error) {
            // Handle the error, e.g., show an error message
            console.error(error);
            alert("Error banning the user");
        }
    }

    async function unbanUser(userId) {
        try {
            const response = await fetch(`https://localhost:7008/api/Person/UnBanAccount?userId=${userId}`);

            if (!response.ok) {
                throw new Error("Error banning the user");
            }

            // Optionally, you can handle the response here if needed
            console.log("User banned successfully");

            // Refresh the table or update the UI as needed
            location.reload();
        } catch (error) {
            // Handle the error, e.g., show an error message
            console.error(error);
            alert("Error banning the user");
        }
    }

    function searchTable() {
        // Get the input value
        const inputValue = document.getElementById("searchInput").value.toLowerCase();

        // Get all table rows
        const tableRows = document.querySelectorAll("#transactionTable tbody tr");

        // Loop through the rows and hide/show based on input value
        tableRows.forEach((row) => {
            const idCell = row.children[0];
            const nameCell = row.children[1];

            const idText = idCell.textContent.toLowerCase();
            const nameText = nameCell.textContent.toLowerCase();

            const showRow = idText.includes(inputValue) || nameText.includes(inputValue);

            // Toggle visibility of the row
            row.style.display = showRow ? "" : "none";
        });
    }
    
</script>
